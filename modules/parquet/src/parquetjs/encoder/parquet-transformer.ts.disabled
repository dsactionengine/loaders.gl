// Forked from https://github.com/kbajalc/parquets under MIT license (Copyright (c) 2017 ironSource Ltd.)
/* eslint-disable camelcase */
import {Transform} from 'stream';
import {ParquetSchema} from '../schema/schema';
import {ParquetEncoder} from './parquet-encoder';
import type {ParquetEncoderOptions} from './parquet-envelope-writer';

/**
 * Create a parquet transform stream
 */
export class ParquetTransformer<T> extends Transform {
  public writer: ParquetEncoder<T>;

  constructor(schema: ParquetSchema, opts: ParquetEncoderOptions = {}) {
    super({objectMode: true});

    const file = {
      close: async () => {},
      write: async (buf: Buffer): Promise<void> => {
        this.push(buf);
      }
    };

    this.writer = new ParquetEncoder(schema, file, opts);
  }

  // tslint:disable-next-line:function-name
  _transform(row: any, encoding: string, callback: (val?: any) => void): Promise<void> {
    if (row) {
      return this.writer.appendRow(row).then(callback);
    }
    callback();
    return Promise.resolve();
  }

  // tslint:disable-next-line:function-name
  async _flush(callback: (val?: any) => void) {
    await this.writer.close(callback);
  }
}
